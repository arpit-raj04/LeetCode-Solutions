class Solution(object):
    def solveSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        def is_valid(board, row, col, num):
            # Convert number to string
            num = str(num)
            
            if num in board[row]:
                return False
                
            for i in range(9):
                if board[i][col] == num:
                    return False
            
            # Check if the number is in the 3x3 sub-grid
            start_row, start_col = 3 * (row // 3), 3 * (col // 3)
            for i in range(start_row, start_row + 3):
                for j in range(start_col, start_col + 3):
                    if board[i][j] == num:
                        return False
            
            return True
        
        def solve_sudoku(board):
            for i in range(9):
                for j in range(9):
                    if board[i][j] == '.':  # Empty cells are marked by '.'
                        for num in range(1, 10):
                            if is_valid(board, i, j, num):
                                board[i][j] = str(num)
                                if solve_sudoku(board):
                                    return True
                                board[i][j] = '.'  # Backtrack
                        return False
            return True
        
        solve_sudoku(board)
