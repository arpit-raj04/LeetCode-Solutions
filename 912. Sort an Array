#include <stdlib.h>

void merge(int *arr, int l, int mid, int r) {
    int n1 = mid - l + 1;
    int n2 = r - mid;

    // Create temporary arrays
    int *L = (int *)malloc(n1 * sizeof(int));
    int *R = (int *)malloc(n2 * sizeof(int));

    // Copy data to temp arrays L[] and R[]
    for (int i = 0; i < n1; i++) {
        L[i] = arr[l + i];
    }
    for (int j = 0; j < n2; j++) {
        R[j] = arr[mid + 1 + j];
    }

    // Merge the temp arrays back into arr[l..r]
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    // Copy any remaining elements of L[], if any
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    // Copy any remaining elements of R[], if any
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }

    // Free the temporary arrays
    free(L);
    free(R);
}

void mergeSort(int *arr, int l, int r) {
    if (l < r) {
        int mid = l + (r - l) / 2;

        // Recursively sort the first and second halves
        mergeSort(arr, l, mid);
        mergeSort(arr, mid + 1, r);

        // Merge the sorted halves
        merge(arr, l, mid, r);
    }
}

int* sortArray(int* nums, int numsSize, int* returnSize) {
    // Allocate memory for the result array
    int *result = (int*)malloc(numsSize * sizeof(int));
    
    // Copy the contents of nums into result
    for (int i = 0; i < numsSize; i++) {
        result[i] = nums[i];
    }

    // Set the returnSize to numsSize
    *returnSize = numsSize;
    
    // Sort the result array using mergeSort
    mergeSort(result, 0, numsSize - 1);
    
    // Return the sorted array
    return result;
}
